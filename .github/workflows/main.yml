on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - released

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Version
        id: version
        run: |
          set -x
          VERSION=$(sed -nr 's/version ?= ?([^-]*).*/\1/p' gradle.properties)
          [ $GITHUB_EVENT_NAME == 'release' ] && VERSION=${{ github.event.release.tag_name }} && VERSION=${VERSION/v/}
          git tag -l | cat
          [ $GITHUB_EVENT_NAME == 'push' ] && VERSION+=-beta && VERSION+=.$(($(git tag -l "$VERSION.*" | sort -nt. -k4 2>/dev/null | tail -1 | rev | cut -d. -f1 | rev)+1))
          [ $GITHUB_EVENT_NAME == 'pull_request' ] && VERSION+=-dev.${{ github.event.pull_request.number }}
          NAME=$(sed -nr 's/rootProject.name ?= ?"(.*)"/\1/p' settings.gradle)-$VERSION
          echo ::set-output name=version::$VERSION
          echo ::set-output name=name::$NAME
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Build with Gradle
        run: ./gradlew -Pversion="${{ steps.version.outputs.version }}" build
      - name: Create Beta Release
        if: (github.event_name == 'push')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: ${{ steps.version.outputs.version }}
          prerelease: ${{ github.event_name != 'release' }}
      - name: Check release upload URL
        id: release
        run: |
          if [ $GITHUB_EVENT_NAME == 'push' ]
          then
            echo "::set-output name=url::${{ steps.create_release.outputs.upload_url }}"
          else
            echo "::set-output name=url::${{ github.event.release.upload_url }}"
          fi
      - name: Upload Beta Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.url }}
          asset_path: build/libs/${{ steps.version.outputs.name }}.jar
          asset_name: ${{ steps.version.outputs.name }}.jar
          asset_content_type: application/java-archive  
